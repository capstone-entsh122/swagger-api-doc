openapi: 3.0.0
info:
  title: One-Stop Sport App API
  version: 1.0.0
  description: API documentation for the One-Stop Sport App
servers:
  - url: http://localhost:3000
    description: Local server
  - url: https://api.yoursportapp.com
    description: Production server
paths:
  /api/users/signup:
    post:
      summary: User Signup
      operationId: userSignup
      requestBody:
        description: User signup details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                displayName:
                  type: string
                  example: User Name
                gender:
                  type: string
                  example: male
                age:
                  type: integer
                  example: 25
                equipment:
                  type: string
                  example: none
      responses:
        '200':
          description: Signup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Signup successful
        '400':
          description: Signup failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Signup failed
                  error:
                    type: string
                    example: Invalid input data
  /api/users/preferences:
    post:
      summary: Set User Preferences
      operationId: setUserPreferences
      security:
        - bearerAuth: []
      requestBody:
        description: User preferences details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                motivation:
                  type: string
                  example: Get fit
                availableTime:
                  type: integer
                  example: 30
                fitnessLevel:
                  type: string
                  example: average
                placePreference:
                  type: string
                  example: home
                socialPreference:
                  type: string
                  example: alone
                diseaseHistory:
                  type: array
                  items:
                    type: string
                  example: ["hypertension"]
      responses:
        '200':
          description: Preferences set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Preferences set successfully
                  recommendedSports:
                    type: array
                    items:
                      type: string
                    example: ["Yoga", "Running", "Swimming"]
        '400':
          description: Setting preferences failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Setting preferences failed
                  error:
                    type: string
                    example: Invalid input data
    put:
      summary: Update User Preferences
      operationId: updateUserPreferences
      security:
        - bearerAuth: []
      requestBody:
        description: User preferences data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                motivation:
                  type: string
                  example: Lose weight
                availableTime:
                  type: integer
                  example: 45
                fitnessLevel:
                  type: string
                  example: good
                placePreference:
                  type: string
                  example: outdoor
                socialPreference:
                  type: string
                  example: with others
                diseaseHistory:
                  type: array
                  items:
                    type: string
                  example: ["cardiovascular"]
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Preferences updated successfully
        '400':
          description: Update failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Update failed
                  error:
                    type: string
                    example: Invalid input data
  /api/users/profile:
    get:
      summary: Get User Profile
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: user123
                  email:
                    type: string
                    example: user@example.com
                  displayName:
                    type: string
                    example: User Name
                  photoUrl:
                    type: string
                    example: http://example.com/photo.jpg
                  gender:
                    type: string
                    example: male
                  age:
                    type: integer
                    example: 25
                  location:
                    type: string
                    example: City, Country
                  equipment:
                    type: string
                    example: none
                  preferences:
                    type: object
                    properties:
                      motivation:
                        type: string
                        example: Get fit
                      availableTime:
                        type: integer
                        example: 30
                      fitnessLevel:
                        type: string
                        example: average
                      placePreference:
                        type: string
                        example: home
                      socialPreference:
                        type: string
                        example: alone
                      diseaseHistory:
                        type: array
                        items:
                          type: string
                        example: ["hypertension"]
                  communities:
                    type: array
                    items:
                      type: string
                    example: ["community123"]
                  points:
                    type: integer
                    example: 100
    put:
      summary: Update User Profile
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        description: User profile data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  example: Updated Name
                photoUrl:
                  type: string
                  example: http://example.com/newphoto.jpg
                location:
                  type: string
                  example: New City, Country
                equipment:
                  type: string
                  example: basic
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
        '400':
          description: Update failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Update failed
                  error:
                    type: string
                    example: Invalid input data
  /api/users/profile/photo:
    post:
      summary: Upload Profile Photo
      operationId: uploadProfilePhoto
      security:
        - bearerAuth: []
      requestBody:
        description: Profile photo upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile photo uploaded successfully
        '400':
          description: Photo upload failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Photo upload failed
                  error:
                    type: string
                    example: Invalid input data
  /api/users/delete:
    delete:
      summary: Delete User Account
      operationId: deleteUserAccount
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User account deleted successfully
        '400':
          description: Deletion failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Deletion failed
                  error:
                    type: string
                    example: Invalid input data
  /api/food/calories:
    post:
      summary: Predict Food Calories
      operationId: predictFoodCalories
      requestBody:
        description: Image of the food
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Prediction successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  calories:
                    type: number
                    example: 250
        '400':
          description: Prediction failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Prediction failed
                  error:
                    type: string
                    example: Invalid input data
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
